
finalprojecthm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00002b18  00002bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800124  00800124  00002c70  2**0
                  ALLOC
  3 .stab         00002898  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e2  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000682a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000699a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a669  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 12 	call	0x241a	; 0x241a <main>
      8a:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:
#define NULL_PTR ((void*)0)   // THIS MADE FOR MAKE A NULL POINTER TO FUNCTION  THAT DOESN'T POINT TO FUNCTIONS AT THE BEGINNING
/*****************************************************************************************************************************/
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/* Timer0 overflow  */
ISR(TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     b70:	80 91 24 01 	lds	r24, 0x0124
     b74:	90 91 25 01 	lds	r25, 0x0125
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     b7c:	e0 91 24 01 	lds	r30, 0x0124
     b80:	f0 91 25 01 	lds	r31, 0x0125
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_19>:
/* Timer0 compare  */
ISR(TIMER0_COMP_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     bd6:	80 91 24 01 	lds	r24, 0x0124
     bda:	90 91 25 01 	lds	r25, 0x0125
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     be2:	e0 91 24 01 	lds	r30, 0x0124
     be6:	f0 91 25 01 	lds	r31, 0x0125
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Set_callBack>:
/*****************************************************************************************************************************/

void Set_callBack(void(*a_ptr)(void)){
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Set_callBack+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	90 93 25 01 	sts	0x0125, r25
     c28:	80 93 24 01 	sts	0x0124, r24
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <Timer0_init>:


void Timer0_init(const Timer0_ConfigType * Config_Ptr){
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <Timer0_init+0x6>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01

	TCNT0= Config_Ptr->initialValue;
     c44:	a2 e5       	ldi	r26, 0x52	; 82
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e9 81       	ldd	r30, Y+1	; 0x01
     c4a:	fa 81       	ldd	r31, Y+2	; 0x02
     c4c:	84 81       	ldd	r24, Z+4	; 0x04
     c4e:	95 81       	ldd	r25, Z+5	; 0x05
     c50:	8c 93       	st	X, r24
	SET_BIT(TCCR0,FOC0); /* for non-PWM */
     c52:	a3 e5       	ldi	r26, 0x53	; 83
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	8c 93       	st	X, r24

	// clock configuration
	TCCR0 = 0;
     c60:	e3 e5       	ldi	r30, 0x53	; 83
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	10 82       	st	Z, r1
	TCCR0 |= (Config_Ptr->clock);
     c66:	a3 e5       	ldi	r26, 0x53	; 83
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e3 e5       	ldi	r30, 0x53	; 83
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	90 81       	ld	r25, Z
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	89 2b       	or	r24, r25
     c78:	8c 93       	st	X, r24

	if ((Config_Ptr->mode==NORMAL_MODE)){
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	79 f4       	brne	.+30     	; 0xca2 <Timer0_init+0x6c>
			SET_BIT(TIMSK,TOIE0);  /*Interrupt for overflow mode  */
     c84:	a9 e5       	ldi	r26, 0x59	; 89
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e9 e5       	ldi	r30, 0x59	; 89
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
     c92:	a8 e5       	ldi	r26, 0x58	; 88
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e8 e5       	ldi	r30, 0x58	; 88
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <Timer0_init+0xae>

		}

	else if ((Config_Ptr->mode==CTC)) {
     ca2:	e9 81       	ldd	r30, Y+1	; 0x01
     ca4:	fa 81       	ldd	r31, Y+2	; 0x02
     ca6:	80 81       	ld	r24, Z
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	e1 f4       	brne	.+56     	; 0xce4 <Timer0_init+0xae>
			SET_BIT(TIMSK,OCIE0);
     cac:	a9 e5       	ldi	r26, 0x59	; 89
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e9 e5       	ldi	r30, 0x59	; 89
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
     cba:	a8 e5       	ldi	r26, 0x58	; 88
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e5       	ldi	r30, 0x58	; 88
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	82 60       	ori	r24, 0x02	; 2
     cc6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	88 60       	ori	r24, 0x08	; 8
     cd4:	8c 93       	st	X, r24
			//configure OCR
			OCR0=Config_Ptr->compareValue;
     cd6:	ac e5       	ldi	r26, 0x5C	; 92
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e9 81       	ldd	r30, Y+1	; 0x01
     cdc:	fa 81       	ldd	r31, Y+2	; 0x02
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	8c 93       	st	X, r24

		}

}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <timer0_DeInit>:


void timer0_DeInit(){
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     cf6:	e3 e5       	ldi	r30, 0x53	; 83
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
	TCNT0 = 0;
     cfc:	e2 e5       	ldi	r30, 0x52	; 82
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	10 82       	st	Z, r1
	OCR0 = 0;
     d02:	ec e5       	ldi	r30, 0x5C	; 92
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
     d08:	a9 e5       	ldi	r26, 0x59	; 89
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e9 e5       	ldi	r30, 0x59	; 89
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
     d16:	a9 e5       	ldi	r26, 0x59	; 89
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e9 e5       	ldi	r30, 0x59	; 89
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	8c 93       	st	X, r24

}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <GPIO_setupPinDirection+0x6>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <GPIO_setupPinDirection+0x8>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	6a 83       	std	Y+2, r22	; 0x02
     d3c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	88 30       	cpi	r24, 0x08	; 8
     d42:	08 f0       	brcs	.+2      	; 0xd46 <GPIO_setupPinDirection+0x1c>
     d44:	d5 c0       	rjmp	.+426    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <GPIO_setupPinDirection+0x24>
     d4c:	d1 c0       	rjmp	.+418    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3d 83       	std	Y+5, r19	; 0x05
     d56:	2c 83       	std	Y+4, r18	; 0x04
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <GPIO_setupPinDirection+0x3a>
     d62:	43 c0       	rjmp	.+134    	; 0xdea <GPIO_setupPinDirection+0xc0>
     d64:	2c 81       	ldd	r18, Y+4	; 0x04
     d66:	3d 81       	ldd	r19, Y+5	; 0x05
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <GPIO_setupPinDirection+0x4e>
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	71 f0       	breq	.+28     	; 0xd92 <GPIO_setupPinDirection+0x68>
     d76:	bc c0       	rjmp	.+376    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
     d78:	2c 81       	ldd	r18, Y+4	; 0x04
     d7a:	3d 81       	ldd	r19, Y+5	; 0x05
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <GPIO_setupPinDirection+0x5a>
     d82:	5f c0       	rjmp	.+190    	; 0xe42 <GPIO_setupPinDirection+0x118>
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <GPIO_setupPinDirection+0x66>
     d8e:	85 c0       	rjmp	.+266    	; 0xe9a <GPIO_setupPinDirection+0x170>
     d90:	af c0       	rjmp	.+350    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	a1 f4       	brne	.+40     	; 0xdc0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d98:	aa e3       	ldi	r26, 0x3A	; 58
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	ea e3       	ldi	r30, 0x3A	; 58
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <GPIO_setupPinDirection+0x8c>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <GPIO_setupPinDirection+0x88>
     dba:	84 2b       	or	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	98 c0       	rjmp	.+304    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dc0:	aa e3       	ldi	r26, 0x3A	; 58
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ea e3       	ldi	r30, 0x3A	; 58
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 2e       	mov	r0, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <GPIO_setupPinDirection+0xb4>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <GPIO_setupPinDirection+0xb0>
     de2:	80 95       	com	r24
     de4:	84 23       	and	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	83 c0       	rjmp	.+262    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	a1 f4       	brne	.+40     	; 0xe18 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     df0:	a7 e3       	ldi	r26, 0x37	; 55
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e7 e3       	ldi	r30, 0x37	; 55
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_setupPinDirection+0xe4>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <GPIO_setupPinDirection+0xe0>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	6c c0       	rjmp	.+216    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e18:	a7 e3       	ldi	r26, 0x37	; 55
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e7 e3       	ldi	r30, 0x37	; 55
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <GPIO_setupPinDirection+0x10c>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <GPIO_setupPinDirection+0x108>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	57 c0       	rjmp	.+174    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	a1 f4       	brne	.+40     	; 0xe70 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e48:	a4 e3       	ldi	r26, 0x34	; 52
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e4 e3       	ldi	r30, 0x34	; 52
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_setupPinDirection+0x13c>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_setupPinDirection+0x138>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	40 c0       	rjmp	.+128    	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e70:	a4 e3       	ldi	r26, 0x34	; 52
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e4 e3       	ldi	r30, 0x34	; 52
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_setupPinDirection+0x164>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_setupPinDirection+0x160>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	2b c0       	rjmp	.+86     	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ea0:	a1 e3       	ldi	r26, 0x31	; 49
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e1 e3       	ldi	r30, 0x31	; 49
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_setupPinDirection+0x194>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_setupPinDirection+0x190>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_setupPinDirection+0x1bc>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_setupPinDirection+0x1b8>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <GPIO_writePin+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <GPIO_writePin+0x8>
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	6a 83       	std	Y+2, r22	; 0x02
     f12:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <GPIO_writePin+0x1c>
     f1a:	d5 c0       	rjmp	.+426    	; 0x10c6 <GPIO_writePin+0x1c6>
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	08 f0       	brcs	.+2      	; 0xf24 <GPIO_writePin+0x24>
     f22:	d1 c0       	rjmp	.+418    	; 0x10c6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3d 83       	std	Y+5, r19	; 0x05
     f2c:	2c 83       	std	Y+4, r18	; 0x04
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <GPIO_writePin+0x3a>
     f38:	43 c0       	rjmp	.+134    	; 0xfc0 <GPIO_writePin+0xc0>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <GPIO_writePin+0x4e>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	71 f0       	breq	.+28     	; 0xf68 <GPIO_writePin+0x68>
     f4c:	bc c0       	rjmp	.+376    	; 0x10c6 <GPIO_writePin+0x1c6>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <GPIO_writePin+0x5a>
     f58:	5f c0       	rjmp	.+190    	; 0x1018 <GPIO_writePin+0x118>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	91 05       	cpc	r25, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <GPIO_writePin+0x66>
     f64:	85 c0       	rjmp	.+266    	; 0x1070 <GPIO_writePin+0x170>
     f66:	af c0       	rjmp	.+350    	; 0x10c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f6e:	ab e3       	ldi	r26, 0x3B	; 59
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_writePin+0x8c>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_writePin+0x88>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	98 c0       	rjmp	.+304    	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_writePin+0xb4>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_writePin+0xb0>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	83 c0       	rjmp	.+262    	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fc6:	a8 e3       	ldi	r26, 0x38	; 56
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e3       	ldi	r30, 0x38	; 56
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_writePin+0xe4>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_writePin+0xe0>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	6c c0       	rjmp	.+216    	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fee:	a8 e3       	ldi	r26, 0x38	; 56
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e3       	ldi	r30, 0x38	; 56
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_writePin+0x10c>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_writePin+0x108>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	57 c0       	rjmp	.+174    	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    101e:	a5 e3       	ldi	r26, 0x35	; 53
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e3       	ldi	r30, 0x35	; 53
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_writePin+0x13c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_writePin+0x138>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	40 c0       	rjmp	.+128    	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1046:	a5 e3       	ldi	r26, 0x35	; 53
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_writePin+0x164>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_writePin+0x160>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	2b c0       	rjmp	.+86     	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	a1 f4       	brne	.+40     	; 0x109e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_writePin+0x194>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_writePin+0x190>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_writePin+0x1bc>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_writePin+0x1b8>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_readPin+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_readPin+0x8>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10e8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <GPIO_readPin+0x1c>
    10f0:	84 c0       	rjmp	.+264    	; 0x11fa <GPIO_readPin+0x124>
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <GPIO_readPin+0x24>
    10f8:	80 c0       	rjmp	.+256    	; 0x11fa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	4c 81       	ldd	r20, Y+4	; 0x04
    1106:	5d 81       	ldd	r21, Y+5	; 0x05
    1108:	41 30       	cpi	r20, 0x01	; 1
    110a:	51 05       	cpc	r21, r1
    110c:	79 f1       	breq	.+94     	; 0x116c <GPIO_readPin+0x96>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	34 f4       	brge	.+12     	; 0x1124 <GPIO_readPin+0x4e>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	21 15       	cp	r18, r1
    111e:	31 05       	cpc	r19, r1
    1120:	69 f0       	breq	.+26     	; 0x113c <GPIO_readPin+0x66>
    1122:	6b c0       	rjmp	.+214    	; 0x11fa <GPIO_readPin+0x124>
    1124:	4c 81       	ldd	r20, Y+4	; 0x04
    1126:	5d 81       	ldd	r21, Y+5	; 0x05
    1128:	42 30       	cpi	r20, 0x02	; 2
    112a:	51 05       	cpc	r21, r1
    112c:	b9 f1       	breq	.+110    	; 0x119c <GPIO_readPin+0xc6>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <GPIO_readPin+0x64>
    1138:	49 c0       	rjmp	.+146    	; 0x11cc <GPIO_readPin+0xf6>
    113a:	5f c0       	rjmp	.+190    	; 0x11fa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    113c:	e9 e3       	ldi	r30, 0x39	; 57
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_readPin+0x7e>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_readPin+0x7a>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	90 70       	andi	r25, 0x00	; 0
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	49 c0       	rjmp	.+146    	; 0x11fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	47 c0       	rjmp	.+142    	; 0x11fa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    116c:	e6 e3       	ldi	r30, 0x36	; 54
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a9 01       	movw	r20, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_readPin+0xae>
    1180:	55 95       	asr	r21
    1182:	47 95       	ror	r20
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_readPin+0xaa>
    1188:	ca 01       	movw	r24, r20
    118a:	81 70       	andi	r24, 0x01	; 1
    118c:	90 70       	andi	r25, 0x00	; 0
    118e:	88 23       	and	r24, r24
    1190:	19 f0       	breq	.+6      	; 0x1198 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	31 c0       	rjmp	.+98     	; 0x11fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	2f c0       	rjmp	.+94     	; 0x11fa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    119c:	e3 e3       	ldi	r30, 0x33	; 51
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_readPin+0xde>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_readPin+0xda>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11c8:	19 82       	std	Y+1, r1	; 0x01
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11cc:	e0 e3       	ldi	r30, 0x30	; 48
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0x10e>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0x10a>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <GPIO_setupPortDirection+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <GPIO_setupPortDirection+0x8>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	84 30       	cpi	r24, 0x04	; 4
    1220:	90 f5       	brcc	.+100    	; 0x1286 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	d1 f0       	breq	.+52     	; 0x126a <GPIO_setupPortDirection+0x5e>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <GPIO_setupPortDirection+0x3e>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f0       	breq	.+24     	; 0x1260 <GPIO_setupPortDirection+0x54>
    1248:	1e c0       	rjmp	.+60     	; 0x1286 <GPIO_setupPortDirection+0x7a>
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <GPIO_setupPortDirection+0x68>
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <GPIO_setupPortDirection+0x72>
    125e:	13 c0       	rjmp	.+38     	; 0x1286 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1260:	ea e3       	ldi	r30, 0x3A	; 58
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	0e c0       	rjmp	.+28     	; 0x1286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    126a:	e7 e3       	ldi	r30, 0x37	; 55
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	80 83       	st	Z, r24
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    127e:	e1 e3       	ldi	r30, 0x31	; 49
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 83       	st	Z, r24
			break;
		}
	}
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <GPIO_writePort+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <GPIO_writePort+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	90 f5       	brcc	.+100    	; 0x130e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3c 83       	std	Y+4, r19	; 0x04
    12b2:	2b 83       	std	Y+3, r18	; 0x03
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	d1 f0       	breq	.+52     	; 0x12f2 <GPIO_writePort+0x5e>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <GPIO_writePort+0x3e>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <GPIO_writePort+0x54>
    12d0:	1e c0       	rjmp	.+60     	; 0x130e <GPIO_writePort+0x7a>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	81 f0       	breq	.+32     	; 0x12fc <GPIO_writePort+0x68>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <GPIO_writePort+0x72>
    12e6:	13 c0       	rjmp	.+38     	; 0x130e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12e8:	eb e3       	ldi	r30, 0x3B	; 59
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	80 83       	st	Z, r24
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12f2:	e8 e3       	ldi	r30, 0x38	; 56
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	04 c0       	rjmp	.+8      	; 0x130e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1306:	e2 e3       	ldi	r30, 0x32	; 50
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
			break;
		}
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_readPort+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <GPIO_readPort+0x8>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    132a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	90 f5       	brcc	.+100    	; 0x1396 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	d1 f0       	breq	.+52     	; 0x137a <GPIO_readPort+0x5e>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <GPIO_readPort+0x3e>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	61 f0       	breq	.+24     	; 0x1370 <GPIO_readPort+0x54>
    1358:	1e c0       	rjmp	.+60     	; 0x1396 <GPIO_readPort+0x7a>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <GPIO_readPort+0x68>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	81 f0       	breq	.+32     	; 0x138e <GPIO_readPort+0x72>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    137a:	e6 e3       	ldi	r30, 0x36	; 54
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1384:	e3 e3       	ldi	r30, 0x33	; 51
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    138e:	e0 e3       	ldi	r30, 0x30	; 48
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <KEYPAD_getPressedKey+0x6>
    13ac:	0f 92       	push	r0
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    13b2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    13b4:	1b 82       	std	Y+3, r1	; 0x03
    13b6:	43 c0       	rjmp	.+134    	; 0x143e <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	98 2f       	mov	r25, r24
    13c4:	9c 5f       	subi	r25, 0xFC	; 252
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	69 2f       	mov	r22, r25
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 01       	movw	r18, r24
    13d8:	2c 5f       	subi	r18, 0xFC	; 252
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <KEYPAD_getPressedKey+0x40>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	2a 95       	dec	r18
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <KEYPAD_getPressedKey+0x3c>
    13ea:	80 95       	com	r24
    13ec:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	69 81       	ldd	r22, Y+1	; 0x01
    13f2:	0e 94 4a 09 	call	0x1294	; 0x1294 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	1c c0       	rjmp	.+56     	; 0x1432 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	6a 81       	ldd	r22, Y+2	; 0x02
    13fe:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPIO_readPin>
    1402:	88 23       	and	r24, r24
    1404:	99 f4       	brne	.+38     	; 0x142c <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	98 2f       	mov	r25, r24
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	89 0f       	add	r24, r25
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	0e 94 24 0a 	call	0x1448	; 0x1448 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	8f 5f       	subi	r24, 0xFF	; 255
    1430:	8a 83       	std	Y+2, r24	; 0x02
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	08 f3       	brcs	.-62     	; 0x13fa <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	8b 83       	std	Y+3, r24	; 0x03
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	08 f4       	brcc	.+2      	; 0x1446 <KEYPAD_getPressedKey+0xa0>
    1444:	b9 cf       	rjmp	.-142    	; 0x13b8 <KEYPAD_getPressedKey+0x12>
    1446:	b6 cf       	rjmp	.-148    	; 0x13b4 <KEYPAD_getPressedKey+0xe>

00001448 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <KEYPAD_4x4_adjustKeyNumber+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1456:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3c 83       	std	Y+4, r19	; 0x04
    1460:	2b 83       	std	Y+3, r18	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	91 05       	cpc	r25, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <KEYPAD_4x4_adjustKeyNumber+0x26>
    146c:	70 c0       	rjmp	.+224    	; 0x154e <KEYPAD_4x4_adjustKeyNumber+0x106>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	29 30       	cpi	r18, 0x09	; 9
    1474:	31 05       	cpc	r19, r1
    1476:	5c f5       	brge	.+86     	; 0x14ce <KEYPAD_4x4_adjustKeyNumber+0x86>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	91 05       	cpc	r25, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1482:	59 c0       	rjmp	.+178    	; 0x1536 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	25 30       	cpi	r18, 0x05	; 5
    148a:	31 05       	cpc	r19, r1
    148c:	9c f4       	brge	.+38     	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1498:	48 c0       	rjmp	.+144    	; 0x152a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	23 30       	cpi	r18, 0x03	; 3
    14a0:	31 05       	cpc	r19, r1
    14a2:	0c f0       	brlt	.+2      	; 0x14a6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    14a4:	45 c0       	rjmp	.+138    	; 0x1530 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    14b0:	39 c0       	rjmp	.+114    	; 0x1524 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    14b2:	67 c0       	rjmp	.+206    	; 0x1582 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	26 30       	cpi	r18, 0x06	; 6
    14ba:	31 05       	cpc	r19, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    14be:	41 c0       	rjmp	.+130    	; 0x1542 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	87 30       	cpi	r24, 0x07	; 7
    14c6:	91 05       	cpc	r25, r1
    14c8:	0c f0       	brlt	.+2      	; 0x14cc <KEYPAD_4x4_adjustKeyNumber+0x84>
    14ca:	3e c0       	rjmp	.+124    	; 0x1548 <KEYPAD_4x4_adjustKeyNumber+0x100>
    14cc:	37 c0       	rjmp	.+110    	; 0x153c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	2c 30       	cpi	r18, 0x0C	; 12
    14d4:	31 05       	cpc	r19, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <KEYPAD_4x4_adjustKeyNumber+0x92>
    14d8:	46 c0       	rjmp	.+140    	; 0x1566 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	8d 30       	cpi	r24, 0x0D	; 13
    14e0:	91 05       	cpc	r25, r1
    14e2:	5c f4       	brge	.+22     	; 0x14fa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	2a 30       	cpi	r18, 0x0A	; 10
    14ea:	31 05       	cpc	r19, r1
    14ec:	b1 f1       	breq	.+108    	; 0x155a <KEYPAD_4x4_adjustKeyNumber+0x112>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	8b 30       	cpi	r24, 0x0B	; 11
    14f4:	91 05       	cpc	r25, r1
    14f6:	a4 f5       	brge	.+104    	; 0x1560 <KEYPAD_4x4_adjustKeyNumber+0x118>
    14f8:	2d c0       	rjmp	.+90     	; 0x1554 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	2e 30       	cpi	r18, 0x0E	; 14
    1500:	31 05       	cpc	r19, r1
    1502:	b9 f1       	breq	.+110    	; 0x1572 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	8e 30       	cpi	r24, 0x0E	; 14
    150a:	91 05       	cpc	r25, r1
    150c:	7c f1       	brlt	.+94     	; 0x156c <KEYPAD_4x4_adjustKeyNumber+0x124>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	2f 30       	cpi	r18, 0x0F	; 15
    1514:	31 05       	cpc	r19, r1
    1516:	79 f1       	breq	.+94     	; 0x1576 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	91 05       	cpc	r25, r1
    1520:	69 f1       	breq	.+90     	; 0x157c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1522:	2f c0       	rjmp	.+94     	; 0x1582 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1524:	87 e0       	ldi	r24, 0x07	; 7
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	2e c0       	rjmp	.+92     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    152a:	88 e0       	ldi	r24, 0x08	; 8
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	2b c0       	rjmp	.+86     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1530:	89 e0       	ldi	r24, 0x09	; 9
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	28 c0       	rjmp	.+80     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1536:	85 e2       	ldi	r24, 0x25	; 37
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	25 c0       	rjmp	.+74     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	22 c0       	rjmp	.+68     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1542:	85 e0       	ldi	r24, 0x05	; 5
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	1f c0       	rjmp	.+62     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1548:	86 e0       	ldi	r24, 0x06	; 6
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    154e:	8a e2       	ldi	r24, 0x2A	; 42
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	16 c0       	rjmp	.+44     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	13 c0       	rjmp	.+38     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	10 c0       	rjmp	.+32     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1566:	8d e2       	ldi	r24, 0x2D	; 45
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    156c:	8d e0       	ldi	r24, 0x0D	; 13
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1576:	8d e3       	ldi	r24, 0x3D	; 61
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    157c:	8b e2       	ldi	r24, 0x2B	; 43
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	62 e0       	ldi	r22, 0x02	; 2
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	6f ef       	ldi	r22, 0xFF	; 255
    15c0:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    15c4:	88 e3       	ldi	r24, 0x38	; 56
    15c6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15ca:	8c e0       	ldi	r24, 0x0C	; 12
    15cc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_sendCommand>
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	e9 97       	sbiw	r28, 0x39	; 57
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e8       	ldi	r26, 0x80	; 128
    160c:	bf e3       	ldi	r27, 0x3F	; 63
    160e:	8d ab       	std	Y+53, r24	; 0x35
    1610:	9e ab       	std	Y+54, r25	; 0x36
    1612:	af ab       	std	Y+55, r26	; 0x37
    1614:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6d a9       	ldd	r22, Y+53	; 0x35
    1618:	7e a9       	ldd	r23, Y+54	; 0x36
    161a:	8f a9       	ldd	r24, Y+55	; 0x37
    161c:	98 ad       	ldd	r25, Y+56	; 0x38
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a e7       	ldi	r20, 0x7A	; 122
    1624:	53 e4       	ldi	r21, 0x43	; 67
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	89 ab       	std	Y+49, r24	; 0x31
    1630:	9a ab       	std	Y+50, r25	; 0x32
    1632:	ab ab       	std	Y+51, r26	; 0x33
    1634:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1636:	69 a9       	ldd	r22, Y+49	; 0x31
    1638:	7a a9       	ldd	r23, Y+50	; 0x32
    163a:	8b a9       	ldd	r24, Y+51	; 0x33
    163c:	9c a9       	ldd	r25, Y+52	; 0x34
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCD_sendCommand+0x7c>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1658:	69 a9       	ldd	r22, Y+49	; 0x31
    165a:	7a a9       	ldd	r23, Y+50	; 0x32
    165c:	8b a9       	ldd	r24, Y+51	; 0x33
    165e:	9c a9       	ldd	r25, Y+52	; 0x34
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6d a9       	ldd	r22, Y+53	; 0x35
    1672:	7e a9       	ldd	r23, Y+54	; 0x36
    1674:	8f a9       	ldd	r24, Y+55	; 0x37
    1676:	98 ad       	ldd	r25, Y+56	; 0x38
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	98 ab       	std	Y+48, r25	; 0x30
    1696:	8f a7       	std	Y+47, r24	; 0x2f
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <LCD_sendCommand+0xdc>
    169a:	89 e1       	ldi	r24, 0x19	; 25
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9e a7       	std	Y+46, r25	; 0x2e
    16a0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_sendCommand+0xca>
    16aa:	9e a7       	std	Y+46, r25	; 0x2e
    16ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b0:	98 a9       	ldd	r25, Y+48	; 0x30
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <LCD_sendCommand+0xbe>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	69 a9       	ldd	r22, Y+49	; 0x31
    16c4:	7a a9       	ldd	r23, Y+50	; 0x32
    16c6:	8b a9       	ldd	r24, Y+51	; 0x33
    16c8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	9c a7       	std	Y+44, r25	; 0x2c
    16dc:	8b a7       	std	Y+43, r24	; 0x2b
    16de:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_sendCommand+0x106>
    16e6:	9c a7       	std	Y+44, r25	; 0x2c
    16e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e8       	ldi	r26, 0x80	; 128
    16fa:	bf e3       	ldi	r27, 0x3F	; 63
    16fc:	8f a3       	std	Y+39, r24	; 0x27
    16fe:	98 a7       	std	Y+40, r25	; 0x28
    1700:	a9 a7       	std	Y+41, r26	; 0x29
    1702:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1704:	6f a1       	ldd	r22, Y+39	; 0x27
    1706:	78 a5       	ldd	r23, Y+40	; 0x28
    1708:	89 a5       	ldd	r24, Y+41	; 0x29
    170a:	9a a5       	ldd	r25, Y+42	; 0x2a
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a e7       	ldi	r20, 0x7A	; 122
    1712:	53 e4       	ldi	r21, 0x43	; 67
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8b a3       	std	Y+35, r24	; 0x23
    171e:	9c a3       	std	Y+36, r25	; 0x24
    1720:	ad a3       	std	Y+37, r26	; 0x25
    1722:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1724:	6b a1       	ldd	r22, Y+35	; 0x23
    1726:	7c a1       	ldd	r23, Y+36	; 0x24
    1728:	8d a1       	ldd	r24, Y+37	; 0x25
    172a:	9e a1       	ldd	r25, Y+38	; 0x26
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	2c f4       	brge	.+10     	; 0x1746 <LCD_sendCommand+0x16a>
		__ticks = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
    1744:	3f c0       	rjmp	.+126    	; 0x17c4 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1746:	6b a1       	ldd	r22, Y+35	; 0x23
    1748:	7c a1       	ldd	r23, Y+36	; 0x24
    174a:	8d a1       	ldd	r24, Y+37	; 0x25
    174c:	9e a1       	ldd	r25, Y+38	; 0x26
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	3f ef       	ldi	r19, 0xFF	; 255
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	57 e4       	ldi	r21, 0x47	; 71
    1756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	4c f5       	brge	.+82     	; 0x17b0 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175e:	6f a1       	ldd	r22, Y+39	; 0x27
    1760:	78 a5       	ldd	r23, Y+40	; 0x28
    1762:	89 a5       	ldd	r24, Y+41	; 0x29
    1764:	9a a5       	ldd	r25, Y+42	; 0x2a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e2       	ldi	r20, 0x20	; 32
    176c:	51 e4       	ldi	r21, 0x41	; 65
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9a a3       	std	Y+34, r25	; 0x22
    1784:	89 a3       	std	Y+33, r24	; 0x21
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <LCD_sendCommand+0x1ca>
    1788:	89 e1       	ldi	r24, 0x19	; 25
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	98 a3       	std	Y+32, r25	; 0x20
    178e:	8f 8f       	std	Y+31, r24	; 0x1f
    1790:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1792:	98 a1       	ldd	r25, Y+32	; 0x20
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <LCD_sendCommand+0x1b8>
    1798:	98 a3       	std	Y+32, r25	; 0x20
    179a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179c:	89 a1       	ldd	r24, Y+33	; 0x21
    179e:	9a a1       	ldd	r25, Y+34	; 0x22
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	9a a3       	std	Y+34, r25	; 0x22
    17a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	69 f7       	brne	.-38     	; 0x1788 <LCD_sendCommand+0x1ac>
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b0:	6b a1       	ldd	r22, Y+35	; 0x23
    17b2:	7c a1       	ldd	r23, Y+36	; 0x24
    17b4:	8d a1       	ldd	r24, Y+37	; 0x25
    17b6:	9e a1       	ldd	r25, Y+38	; 0x26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	9e 8f       	std	Y+30, r25	; 0x1e
    17ca:	8d 8f       	std	Y+29, r24	; 0x1d
    17cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_sendCommand+0x1f4>
    17d4:	9e 8f       	std	Y+30, r25	; 0x1e
    17d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	69 ad       	ldd	r22, Y+57	; 0x39
    17dc:	0e 94 4a 09 	call	0x1294	; 0x1294 <GPIO_writePort>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e8       	ldi	r26, 0x80	; 128
    17e6:	bf e3       	ldi	r27, 0x3F	; 63
    17e8:	89 8f       	std	Y+25, r24	; 0x19
    17ea:	9a 8f       	std	Y+26, r25	; 0x1a
    17ec:	ab 8f       	std	Y+27, r26	; 0x1b
    17ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	69 8d       	ldd	r22, Y+25	; 0x19
    17f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a e7       	ldi	r20, 0x7A	; 122
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8d 8b       	std	Y+21, r24	; 0x15
    180a:	9e 8b       	std	Y+22, r25	; 0x16
    180c:	af 8b       	std	Y+23, r26	; 0x17
    180e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1810:	6d 89       	ldd	r22, Y+21	; 0x15
    1812:	7e 89       	ldd	r23, Y+22	; 0x16
    1814:	8f 89       	ldd	r24, Y+23	; 0x17
    1816:	98 8d       	ldd	r25, Y+24	; 0x18
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <LCD_sendCommand+0x256>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	69 8d       	ldd	r22, Y+25	; 0x19
    184c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <LCD_sendCommand+0x2b6>
    1874:	89 e1       	ldi	r24, 0x19	; 25
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9a 8b       	std	Y+18, r25	; 0x12
    187a:	89 8b       	std	Y+17, r24	; 0x11
    187c:	89 89       	ldd	r24, Y+17	; 0x11
    187e:	9a 89       	ldd	r25, Y+18	; 0x12
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_sendCommand+0x2a4>
    1884:	9a 8b       	std	Y+18, r25	; 0x12
    1886:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	8b 89       	ldd	r24, Y+19	; 0x13
    188a:	9c 89       	ldd	r25, Y+20	; 0x14
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9c 8b       	std	Y+20, r25	; 0x14
    1890:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	8b 89       	ldd	r24, Y+19	; 0x13
    1894:	9c 89       	ldd	r25, Y+20	; 0x14
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <LCD_sendCommand+0x298>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6d 89       	ldd	r22, Y+21	; 0x15
    189e:	7e 89       	ldd	r23, Y+22	; 0x16
    18a0:	8f 89       	ldd	r24, Y+23	; 0x17
    18a2:	98 8d       	ldd	r25, Y+24	; 0x18
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	8b 89       	ldd	r24, Y+19	; 0x13
    18b2:	9c 89       	ldd	r25, Y+20	; 0x14
    18b4:	98 8b       	std	Y+16, r25	; 0x10
    18b6:	8f 87       	std	Y+15, r24	; 0x0f
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	98 89       	ldd	r25, Y+16	; 0x10
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_sendCommand+0x2e0>
    18c0:	98 8b       	std	Y+16, r25	; 0x10
    18c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 e8       	ldi	r26, 0x80	; 128
    18d4:	bf e3       	ldi	r27, 0x3F	; 63
    18d6:	8b 87       	std	Y+11, r24	; 0x0b
    18d8:	9c 87       	std	Y+12, r25	; 0x0c
    18da:	ad 87       	std	Y+13, r26	; 0x0d
    18dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a e7       	ldi	r20, 0x7A	; 122
    18ec:	53 e4       	ldi	r21, 0x43	; 67
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8f 83       	std	Y+7, r24	; 0x07
    18f8:	98 87       	std	Y+8, r25	; 0x08
    18fa:	a9 87       	std	Y+9, r26	; 0x09
    18fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1900:	78 85       	ldd	r23, Y+8	; 0x08
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <LCD_sendCommand+0x344>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	3f c0       	rjmp	.+126    	; 0x199e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	6b 85       	ldd	r22, Y+11	; 0x0b
    193a:	7c 85       	ldd	r23, Y+12	; 0x0c
    193c:	8d 85       	ldd	r24, Y+13	; 0x0d
    193e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <LCD_sendCommand+0x3a4>
    1962:	89 e1       	ldi	r24, 0x19	; 25
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_sendCommand+0x392>
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <LCD_sendCommand+0x386>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <LCD_sendCommand+0x3ce>
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    19b2:	e9 96       	adiw	r28, 0x39	; 57
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	e9 97       	sbiw	r28, 0x39	; 57
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e8       	ldi	r26, 0x80	; 128
    19f4:	bf e3       	ldi	r27, 0x3F	; 63
    19f6:	8d ab       	std	Y+53, r24	; 0x35
    19f8:	9e ab       	std	Y+54, r25	; 0x36
    19fa:	af ab       	std	Y+55, r26	; 0x37
    19fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1a00:	7e a9       	ldd	r23, Y+54	; 0x36
    1a02:	8f a9       	ldd	r24, Y+55	; 0x37
    1a04:	98 ad       	ldd	r25, Y+56	; 0x38
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	53 e4       	ldi	r21, 0x43	; 67
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	89 ab       	std	Y+49, r24	; 0x31
    1a18:	9a ab       	std	Y+50, r25	; 0x32
    1a1a:	ab ab       	std	Y+51, r26	; 0x33
    1a1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a20:	7a a9       	ldd	r23, Y+50	; 0x32
    1a22:	8b a9       	ldd	r24, Y+51	; 0x33
    1a24:	9c a9       	ldd	r25, Y+52	; 0x34
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	98 ab       	std	Y+48, r25	; 0x30
    1a3c:	8f a7       	std	Y+47, r24	; 0x2f
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1a40:	69 a9       	ldd	r22, Y+49	; 0x31
    1a42:	7a a9       	ldd	r23, Y+50	; 0x32
    1a44:	8b a9       	ldd	r24, Y+51	; 0x33
    1a46:	9c a9       	ldd	r25, Y+52	; 0x34
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6d a9       	ldd	r22, Y+53	; 0x35
    1a5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_displayCharacter+0xdc>
    1a82:	89 e1       	ldi	r24, 0x19	; 25
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e a7       	std	Y+46, r25	; 0x2e
    1a88:	8d a7       	std	Y+45, r24	; 0x2d
    1a8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_displayCharacter+0xca>
    1a92:	9e a7       	std	Y+46, r25	; 0x2e
    1a94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a98:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	98 ab       	std	Y+48, r25	; 0x30
    1a9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_displayCharacter+0xbe>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1aac:	7a a9       	ldd	r23, Y+50	; 0x32
    1aae:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	98 ab       	std	Y+48, r25	; 0x30
    1abc:	8f a7       	std	Y+47, r24	; 0x2f
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	9c a7       	std	Y+44, r25	; 0x2c
    1ac4:	8b a7       	std	Y+43, r24	; 0x2b
    1ac6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_displayCharacter+0x106>
    1ace:	9c a7       	std	Y+44, r25	; 0x2c
    1ad0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	62 e0       	ldi	r22, 0x02	; 2
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	8f a3       	std	Y+39, r24	; 0x27
    1ae6:	98 a7       	std	Y+40, r25	; 0x28
    1ae8:	a9 a7       	std	Y+41, r26	; 0x29
    1aea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	6f a1       	ldd	r22, Y+39	; 0x27
    1aee:	78 a5       	ldd	r23, Y+40	; 0x28
    1af0:	89 a5       	ldd	r24, Y+41	; 0x29
    1af2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4a e7       	ldi	r20, 0x7A	; 122
    1afa:	53 e4       	ldi	r21, 0x43	; 67
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8b a3       	std	Y+35, r24	; 0x23
    1b06:	9c a3       	std	Y+36, r25	; 0x24
    1b08:	ad a3       	std	Y+37, r26	; 0x25
    1b0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b10:	8d a1       	ldd	r24, Y+37	; 0x25
    1b12:	9e a1       	ldd	r25, Y+38	; 0x26
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b30:	7c a1       	ldd	r23, Y+36	; 0x24
    1b32:	8d a1       	ldd	r24, Y+37	; 0x25
    1b34:	9e a1       	ldd	r25, Y+38	; 0x26
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	6f a1       	ldd	r22, Y+39	; 0x27
    1b48:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <LCD_displayCharacter+0x1ca>
    1b70:	89 e1       	ldi	r24, 0x19	; 25
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	98 a3       	std	Y+32, r25	; 0x20
    1b76:	8f 8f       	std	Y+31, r24	; 0x1f
    1b78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_displayCharacter+0x1b8>
    1b80:	98 a3       	std	Y+32, r25	; 0x20
    1b82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	89 a1       	ldd	r24, Y+33	; 0x21
    1b86:	9a a1       	ldd	r25, Y+34	; 0x22
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b90:	9a a1       	ldd	r25, Y+34	; 0x22
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <LCD_displayCharacter+0x1ac>
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9a a3       	std	Y+34, r25	; 0x22
    1baa:	89 a3       	std	Y+33, r24	; 0x21
    1bac:	89 a1       	ldd	r24, Y+33	; 0x21
    1bae:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_displayCharacter+0x1f4>
    1bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bbe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	69 ad       	ldd	r22, Y+57	; 0x39
    1bc4:	0e 94 4a 09 	call	0x1294	; 0x1294 <GPIO_writePort>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e8       	ldi	r26, 0x80	; 128
    1bce:	bf e3       	ldi	r27, 0x3F	; 63
    1bd0:	89 8f       	std	Y+25, r24	; 0x19
    1bd2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bd4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a e7       	ldi	r20, 0x7A	; 122
    1be6:	53 e4       	ldi	r21, 0x43	; 67
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8d 8b       	std	Y+21, r24	; 0x15
    1bf2:	9e 8b       	std	Y+22, r25	; 0x16
    1bf4:	af 8b       	std	Y+23, r26	; 0x17
    1bf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	69 8d       	ldd	r22, Y+25	; 0x19
    1c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LCD_displayCharacter+0x2b6>
    1c5c:	89 e1       	ldi	r24, 0x19	; 25
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
    1c64:	89 89       	ldd	r24, Y+17	; 0x11
    1c66:	9a 89       	ldd	r25, Y+18	; 0x12
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_displayCharacter+0x2a4>
    1c6c:	9a 8b       	std	Y+18, r25	; 0x12
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LCD_displayCharacter+0x298>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6d 89       	ldd	r22, Y+21	; 0x15
    1c86:	7e 89       	ldd	r23, Y+22	; 0x16
    1c88:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9c 8b       	std	Y+20, r25	; 0x14
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
    1c98:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca2:	98 89       	ldd	r25, Y+16	; 0x10
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_displayCharacter+0x2e0>
    1ca8:	98 8b       	std	Y+16, r25	; 0x10
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 80 07 	call	0xf00	; 0xf00 <GPIO_writePin>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	8b 87       	std	Y+11, r24	; 0x0b
    1cc0:	9c 87       	std	Y+12, r25	; 0x0c
    1cc2:	ad 87       	std	Y+13, r26	; 0x0d
    1cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	53 e4       	ldi	r21, 0x43	; 67
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8f 83       	std	Y+7, r24	; 0x07
    1ce0:	98 87       	std	Y+8, r25	; 0x08
    1ce2:	a9 87       	std	Y+9, r26	; 0x09
    1ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_displayCharacter+0x3a4>
    1d4a:	89 e1       	ldi	r24, 0x19	; 25
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_displayCharacter+0x392>
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_displayCharacter+0x386>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayCharacter+0x3ce>
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d9a:	e9 96       	adiw	r28, 0x39	; 57
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCD_displayString+0x6>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	9b 83       	std	Y+3, r25	; 0x03
    1dba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	0e c0       	rjmp	.+28     	; 0x1ddc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e2 0f       	add	r30, r18
    1dce:	f3 1f       	adc	r31, r19
    1dd0:	80 81       	ld	r24, Z
    1dd2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_displayCharacter>
		i++;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	80 81       	ld	r24, Z
    1dee:	88 23       	and	r24, r24
    1df0:	39 f7       	brne	.-50     	; 0x1dc0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCD_moveCursor+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <LCD_moveCursor+0x8>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8a 83       	std	Y+2, r24	; 0x02
    1e0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3d 83       	std	Y+5, r19	; 0x05
    1e18:	2c 83       	std	Y+4, r18	; 0x04
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	c1 f0       	breq	.+48     	; 0x1e54 <LCD_moveCursor+0x56>
    1e24:	2c 81       	ldd	r18, Y+4	; 0x04
    1e26:	3d 81       	ldd	r19, Y+5	; 0x05
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_moveCursor+0x3a>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <LCD_moveCursor+0x50>
    1e36:	19 c0       	rjmp	.+50     	; 0x1e6a <LCD_moveCursor+0x6c>
    1e38:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	69 f0       	breq	.+26     	; 0x1e5c <LCD_moveCursor+0x5e>
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	61 f0       	breq	.+24     	; 0x1e64 <LCD_moveCursor+0x66>
    1e4c:	0e c0       	rjmp	.+28     	; 0x1e6a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	0b c0       	rjmp	.+22     	; 0x1e6a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	80 5c       	subi	r24, 0xC0	; 192
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	07 c0       	rjmp	.+14     	; 0x1e6a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	80 5f       	subi	r24, 0xF0	; 240
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	80 5b       	subi	r24, 0xB0	; 176
    1e68:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_sendCommand>
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <LCD_displayStringRowColumn+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <LCD_displayStringRowColumn+0x8>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	6a 83       	std	Y+2, r22	; 0x02
    1e92:	5c 83       	std	Y+4, r21	; 0x04
    1e94:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	6a 81       	ldd	r22, Y+2	; 0x02
    1e9a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	62 97       	sbiw	r28, 0x12	; 18
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	9a 8b       	std	Y+18, r25	; 0x12
    1eca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ecc:	89 89       	ldd	r24, Y+17	; 0x11
    1ece:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed0:	9e 01       	movw	r18, r28
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	4a e0       	ldi	r20, 0x0A	; 10
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <itoa>
   LCD_displayString(buff); /* Display the string */
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
}
    1ee8:	62 96       	adiw	r28, 0x12	; 18
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_sendCommand>
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <call_back_fun>:
#include "main.h"
#include <avr/io.h>
#include <avr/delay.h>

void call_back_fun(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	micro_seconds++ ;
    1f16:	80 91 27 01 	lds	r24, 0x0127
    1f1a:	90 91 28 01 	lds	r25, 0x0128
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	90 93 28 01 	sts	0x0128, r25
    1f24:	80 93 27 01 	sts	0x0127, r24
	if(micro_seconds==31)
    1f28:	80 91 27 01 	lds	r24, 0x0127
    1f2c:	90 91 28 01 	lds	r25, 0x0128
    1f30:	8f 31       	cpi	r24, 0x1F	; 31
    1f32:	91 05       	cpc	r25, r1
    1f34:	49 f4       	brne	.+18     	; 0x1f48 <call_back_fun+0x3a>
	{
		seconds++;
    1f36:	80 91 29 01 	lds	r24, 0x0129
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 29 01 	sts	0x0129, r24
		micro_seconds=0;
    1f40:	10 92 28 01 	sts	0x0128, r1
    1f44:	10 92 27 01 	sts	0x0127, r1
      }
	}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <get_password>:


void get_password (uint8 *password_array){
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	62 97       	sbiw	r28, 0x12	; 18
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(1, 0);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_moveCursor>
	uint8 key;
	uint8 i =0;
    1f6e:	1f 86       	std	Y+15, r1	; 0x0f
    1f70:	89 c0       	rjmp	.+274    	; 0x2084 <get_password+0x136>
    while(i !=password_lengh)
    {
    	key =  KEYPAD_getPressedKey();
    1f72:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <KEYPAD_getPressedKey>
    1f76:	88 8b       	std	Y+16, r24	; 0x10
    	if (key >=0 && key <=9)
    1f78:	88 89       	ldd	r24, Y+16	; 0x10
    1f7a:	8a 30       	cpi	r24, 0x0A	; 10
    1f7c:	88 f4       	brcc	.+34     	; 0x1fa0 <get_password+0x52>
    	{
    		 LCD_displayCharacter("*");
    1f7e:	80 e6       	ldi	r24, 0x60	; 96
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_displayCharacter>
    		 *(password_array +i)= key;
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	89 89       	ldd	r24, Y+17	; 0x11
    1f8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	88 89       	ldd	r24, Y+16	; 0x10
    1f98:	80 83       	st	Z, r24
    		 i++;
    1f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	8f 87       	std	Y+15, r24	; 0x0f
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e8       	ldi	r25, 0x80	; 128
    1fa4:	ab e3       	ldi	r26, 0x3B	; 59
    1fa6:	b5 e4       	ldi	r27, 0x45	; 69
    1fa8:	8b 87       	std	Y+11, r24	; 0x0b
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	ad 87       	std	Y+13, r26	; 0x0d
    1fae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a e7       	ldi	r20, 0x7A	; 122
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8f 83       	std	Y+7, r24	; 0x07
    1fca:	98 87       	std	Y+8, r25	; 0x08
    1fcc:	a9 87       	std	Y+9, r26	; 0x09
    1fce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <get_password+0xa4>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <get_password+0x122>
	else if (__tmp > 65535)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <get_password+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <get_password+0x104>
    2034:	89 e1       	ldi	r24, 0x19	; 25
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <get_password+0xf2>
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <get_password+0xe6>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <get_password+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <get_password+0x12e>
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01

void get_password (uint8 *password_array){
	LCD_moveCursor(1, 0);
	uint8 key;
	uint8 i =0;
    while(i !=password_lengh)
    2084:	8f 85       	ldd	r24, Y+15	; 0x0f
    2086:	85 30       	cpi	r24, 0x05	; 5
    2088:	09 f0       	breq	.+2      	; 0x208c <get_password+0x13e>
    208a:	73 cf       	rjmp	.-282    	; 0x1f72 <get_password+0x24>
    		 *(password_array +i)= key;
    		 i++;
    	}
    	_delay_ms(keypad_delay);
    }
    key =0;
    208c:	18 8a       	std	Y+16, r1	; 0x10
    /* stay till user pushes on/0f button */
    while (KEYPAD_getPressedKey() !=13);
    208e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <KEYPAD_getPressedKey>
    2092:	8d 30       	cpi	r24, 0x0D	; 13
    2094:	e1 f7       	brne	.-8      	; 0x208e <get_password+0x140>
}
    2096:	62 96       	adiw	r28, 0x12	; 18
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <usart_send_password>:


void usart_send_password (uint8 *password_array){
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	61 97       	sbiw	r28, 0x11	; 17
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	99 8b       	std	Y+17, r25	; 0x11
    20be:	88 8b       	std	Y+16, r24	; 0x10

	uint8 i;
		for (i=0;i<password_lengh;i++){
    20c0:	1f 86       	std	Y+15, r1	; 0x0f
    20c2:	7e c0       	rjmp	.+252    	; 0x21c0 <usart_send_password+0x118>
			UART_sendByte(PassWord[i]);
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	fc 01       	movw	r30, r24
    20cc:	e6 5d       	subi	r30, 0xD6	; 214
    20ce:	fe 4f       	sbci	r31, 0xFE	; 254
    20d0:	80 81       	ld	r24, Z
    20d2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a8 ec       	ldi	r26, 0xC8	; 200
    20dc:	b2 e4       	ldi	r27, 0x42	; 66
    20de:	8b 87       	std	Y+11, r24	; 0x0b
    20e0:	9c 87       	std	Y+12, r25	; 0x0c
    20e2:	ad 87       	std	Y+13, r26	; 0x0d
    20e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4a e7       	ldi	r20, 0x7A	; 122
    20f4:	53 e4       	ldi	r21, 0x43	; 67
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8f 83       	std	Y+7, r24	; 0x07
    2100:	98 87       	std	Y+8, r25	; 0x08
    2102:	a9 87       	std	Y+9, r26	; 0x09
    2104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <usart_send_password+0x80>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <usart_send_password+0xfe>
	else if (__tmp > 65535)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <usart_send_password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <usart_send_password+0xe0>
    216a:	89 e1       	ldi	r24, 0x19	; 25
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <usart_send_password+0xce>
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <usart_send_password+0xc2>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <usart_send_password+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <usart_send_password+0x10a>
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01


void usart_send_password (uint8 *password_array){

	uint8 i;
		for (i=0;i<password_lengh;i++){
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8f 87       	std	Y+15, r24	; 0x0f
    21c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c2:	85 30       	cpi	r24, 0x05	; 5
    21c4:	08 f4       	brcc	.+2      	; 0x21c8 <usart_send_password+0x120>
    21c6:	7e cf       	rjmp	.-260    	; 0x20c4 <usart_send_password+0x1c>
			UART_sendByte(PassWord[i]);
			_delay_ms(100);
		}
}
    21c8:	61 96       	adiw	r28, 0x11	; 17
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <door_unlock>:


void door_unlock (void){
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
	seconds = 0;
    21e2:	10 92 29 01 	sts	0x0129, r1
		LCD_clearScreen();
    21e6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Door is unlocking");
    21ea:	22 e6       	ldi	r18, 0x62	; 98
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	a9 01       	movw	r20, r18
    21f4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
		while (seconds < motor_worktime);
    21f8:	80 91 29 01 	lds	r24, 0x0129
    21fc:	8f 30       	cpi	r24, 0x0F	; 15
    21fe:	e0 f3       	brcs	.-8      	; 0x21f8 <door_unlock+0x1e>

		/* let the door be open for 3 seconds */
		seconds = 0;
    2200:	10 92 29 01 	sts	0x0129, r1
		LCD_clearScreen();
    2204:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Door is now open");
    2208:	24 e7       	ldi	r18, 0x74	; 116
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	a9 01       	movw	r20, r18
    2212:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
		while (seconds < motor_worktime);
    2216:	80 91 29 01 	lds	r24, 0x0129
    221a:	8f 30       	cpi	r24, 0x0F	; 15
    221c:	e0 f3       	brcs	.-8      	; 0x2216 <door_unlock+0x3c>

		/* hold the system for 15 seconds & display to user that door is locking */
		seconds = 0;
    221e:	10 92 29 01 	sts	0x0129, r1
		LCD_clearScreen();
    2222:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Door is locking");
    2226:	25 e8       	ldi	r18, 0x85	; 133
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	a9 01       	movw	r20, r18
    2230:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
		while (seconds < motor_worktime);
    2234:	80 91 29 01 	lds	r24, 0x0129
    2238:	8f 30       	cpi	r24, 0x0F	; 15
    223a:	e0 f3       	brcs	.-8      	; 0x2234 <door_unlock+0x5a>
}
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <password_init>:


void password_init (void){
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	2e 97       	sbiw	r28, 0x0e	; 14
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	ba c0       	rjmp	.+372    	; 0x23cc <password_init+0x18a>

	while(password_match_status == PASSWORD_MISMATCHED){
			LCD_clearScreen();
    2258:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
			LCD_displayString("Enter password");
    225c:	85 e9       	ldi	r24, 0x95	; 149
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
			LCD_moveCursor(1, 0);
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_moveCursor>
			get_password(PassWord); /* get the password from user */
    226c:	8a e2       	ldi	r24, 0x2A	; 42
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <get_password>
			UART_sendByte(READY_TO_SEND);
    2274:	85 e1       	ldi	r24, 0x15	; 21
    2276:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
			while (UART_recieveByte() != READY_TO_RECEIVE); /* wait for a response */
    227a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    227e:	86 31       	cpi	r24, 0x16	; 22
    2280:	e1 f7       	brne	.-8      	; 0x227a <password_init+0x38>
			usart_send_password(PassWord);
    2282:	8a e2       	ldi	r24, 0x2A	; 42
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	0e 94 54 10 	call	0x20a8	; 0x20a8 <usart_send_password>

			/* get confirm password from user */
			LCD_clearScreen();
    228a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Re-enter password");
    228e:	24 ea       	ldi	r18, 0xA4	; 164
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	a9 01       	movw	r20, r18
    2298:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_moveCursor>
			get_password(PassWord);
    22a4:	8a e2       	ldi	r24, 0x2A	; 42
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <get_password>
			UART_sendByte(READY_TO_SEND);
    22ac:	85 e1       	ldi	r24, 0x15	; 21
    22ae:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
			while (UART_recieveByte() != READY_TO_RECEIVE);
    22b2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    22b6:	86 31       	cpi	r24, 0x16	; 22
    22b8:	e1 f7       	brne	.-8      	; 0x22b2 <password_init+0x70>
			usart_send_password(PassWord);
    22ba:	8a e2       	ldi	r24, 0x2A	; 42
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	0e 94 54 10 	call	0x20a8	; 0x20a8 <usart_send_password>

			/* wait for a response from Control ECU about passwords matching */
			while (UART_recieveByte() != READY_TO_SEND);
    22c2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    22c6:	85 31       	cpi	r24, 0x15	; 21
    22c8:	e1 f7       	brne	.-8      	; 0x22c2 <password_init+0x80>
			password_match_status = UART_recieveByte();
    22ca:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    22ce:	80 93 26 01 	sts	0x0126, r24

			if (password_match_status == PASSWORD_MISMATCHED){
    22d2:	80 91 26 01 	lds	r24, 0x0126
    22d6:	88 23       	and	r24, r24
    22d8:	09 f0       	breq	.+2      	; 0x22dc <password_init+0x9a>
    22da:	78 c0       	rjmp	.+240    	; 0x23cc <password_init+0x18a>
				LCD_clearScreen();
    22dc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
				LCD_displayString("Passwords mismatch");
    22e0:	86 eb       	ldi	r24, 0xB6	; 182
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e4       	ldi	r25, 0x40	; 64
    22ec:	ac e9       	ldi	r26, 0x9C	; 156
    22ee:	b5 e4       	ldi	r27, 0x45	; 69
    22f0:	8b 87       	std	Y+11, r24	; 0x0b
    22f2:	9c 87       	std	Y+12, r25	; 0x0c
    22f4:	ad 87       	std	Y+13, r26	; 0x0d
    22f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	53 e4       	ldi	r21, 0x43	; 67
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8f 83       	std	Y+7, r24	; 0x07
    2312:	98 87       	std	Y+8, r25	; 0x08
    2314:	a9 87       	std	Y+9, r26	; 0x09
    2316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <password_init+0xf8>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <password_init+0x176>
	else if (__tmp > 65535)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <password_init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	0f c0       	rjmp	.+30     	; 0x239a <password_init+0x158>
    237c:	89 e1       	ldi	r24, 0x19	; 25
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <password_init+0x146>
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <password_init+0x13a>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <password_init+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <password_init+0x182>
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
}


void password_init (void){

	while(password_match_status == PASSWORD_MISMATCHED){
    23cc:	80 91 26 01 	lds	r24, 0x0126
    23d0:	88 23       	and	r24, r24
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <password_init+0x194>
    23d4:	41 cf       	rjmp	.-382    	; 0x2258 <password_init+0x16>
				LCD_clearScreen();
				LCD_displayString("Passwords mismatch");
				_delay_ms(lcd_display_delay);
			}
		}
	       password_match_status = PASSWORD_MISMATCHED; /* reset password match to MISMATCH for later usage */
    23d6:	10 92 26 01 	sts	0x0126, r1
}
    23da:	2e 96       	adiw	r28, 0x0e	; 14
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <app_options>:

void app_options(void){
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    23f4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: open door");
    23f8:	29 ec       	ldi	r18, 0xC9	; 201
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: change password");
    2406:	26 ed       	ldi	r18, 0xD6	; 214
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	a9 01       	movw	r20, r18
    2410:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayStringRowColumn>
}
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <main>:

int main(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	e5 97       	sbiw	r28, 0x35	; 53
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<SREG_I); // enable I-BIT
    242e:	af e5       	ldi	r26, 0x5F	; 95
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	ef e5       	ldi	r30, 0x5F	; 95
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	8c 93       	st	X, r24

	UART_configType usart_con = {9600,NO_Parity, One_Stop_Bit, Data_8_Bits};
    243c:	ce 01       	movw	r24, r28
    243e:	4f 96       	adiw	r24, 0x1f	; 31
    2440:	9d a7       	std	Y+45, r25	; 0x2d
    2442:	8c a7       	std	Y+44, r24	; 0x2c
    2444:	ed e1       	ldi	r30, 0x1D	; 29
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	ff a7       	std	Y+47, r31	; 0x2f
    244a:	ee a7       	std	Y+46, r30	; 0x2e
    244c:	f7 e0       	ldi	r31, 0x07	; 7
    244e:	f8 ab       	std	Y+48, r31	; 0x30
    2450:	ee a5       	ldd	r30, Y+46	; 0x2e
    2452:	ff a5       	ldd	r31, Y+47	; 0x2f
    2454:	00 80       	ld	r0, Z
    2456:	8e a5       	ldd	r24, Y+46	; 0x2e
    2458:	9f a5       	ldd	r25, Y+47	; 0x2f
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	9f a7       	std	Y+47, r25	; 0x2f
    245e:	8e a7       	std	Y+46, r24	; 0x2e
    2460:	ec a5       	ldd	r30, Y+44	; 0x2c
    2462:	fd a5       	ldd	r31, Y+45	; 0x2d
    2464:	00 82       	st	Z, r0
    2466:	8c a5       	ldd	r24, Y+44	; 0x2c
    2468:	9d a5       	ldd	r25, Y+45	; 0x2d
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	9d a7       	std	Y+45, r25	; 0x2d
    246e:	8c a7       	std	Y+44, r24	; 0x2c
    2470:	98 a9       	ldd	r25, Y+48	; 0x30
    2472:	91 50       	subi	r25, 0x01	; 1
    2474:	98 ab       	std	Y+48, r25	; 0x30
    2476:	e8 a9       	ldd	r30, Y+48	; 0x30
    2478:	ee 23       	and	r30, r30
    247a:	51 f7       	brne	.-44     	; 0x2450 <main+0x36>

	UART_init(&usart_con);
    247c:	ce 01       	movw	r24, r28
    247e:	4f 96       	adiw	r24, 0x1f	; 31
    2480:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_init>

	Set_callBack(call_back_fun);
    2484:	87 e8       	ldi	r24, 0x87	; 135
    2486:	9f e0       	ldi	r25, 0x0F	; 15
    2488:	0e 94 09 06 	call	0xc12	; 0xc12 <Set_callBack>

	Timer0_ConfigType timer_con = { NORMAL_MODE, F_CPU_1024,0,0 };
    248c:	ce 01       	movw	r24, r28
    248e:	86 96       	adiw	r24, 0x26	; 38
    2490:	9a ab       	std	Y+50, r25	; 0x32
    2492:	89 ab       	std	Y+49, r24	; 0x31
    2494:	e7 e1       	ldi	r30, 0x17	; 23
    2496:	f1 e0       	ldi	r31, 0x01	; 1
    2498:	fc ab       	std	Y+52, r31	; 0x34
    249a:	eb ab       	std	Y+51, r30	; 0x33
    249c:	f6 e0       	ldi	r31, 0x06	; 6
    249e:	fd ab       	std	Y+53, r31	; 0x35
    24a0:	eb a9       	ldd	r30, Y+51	; 0x33
    24a2:	fc a9       	ldd	r31, Y+52	; 0x34
    24a4:	00 80       	ld	r0, Z
    24a6:	8b a9       	ldd	r24, Y+51	; 0x33
    24a8:	9c a9       	ldd	r25, Y+52	; 0x34
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	9c ab       	std	Y+52, r25	; 0x34
    24ae:	8b ab       	std	Y+51, r24	; 0x33
    24b0:	e9 a9       	ldd	r30, Y+49	; 0x31
    24b2:	fa a9       	ldd	r31, Y+50	; 0x32
    24b4:	00 82       	st	Z, r0
    24b6:	89 a9       	ldd	r24, Y+49	; 0x31
    24b8:	9a a9       	ldd	r25, Y+50	; 0x32
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	9a ab       	std	Y+50, r25	; 0x32
    24be:	89 ab       	std	Y+49, r24	; 0x31
    24c0:	9d a9       	ldd	r25, Y+53	; 0x35
    24c2:	91 50       	subi	r25, 0x01	; 1
    24c4:	9d ab       	std	Y+53, r25	; 0x35
    24c6:	ed a9       	ldd	r30, Y+53	; 0x35
    24c8:	ee 23       	and	r30, r30
    24ca:	51 f7       	brne	.-44     	; 0x24a0 <main+0x86>

	Timer0_init(&timer_con );
    24cc:	ce 01       	movw	r24, r28
    24ce:	86 96       	adiw	r24, 0x26	; 38
    24d0:	0e 94 1b 06 	call	0xc36	; 0xc36 <Timer0_init>

	LCD_init();
    24d4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <LCD_init>

	password_init ();
    24d8:	0e 94 21 11 	call	0x2242	; 0x2242 <password_init>
	app_options();
    24dc:	0e 94 f6 11 	call	0x23ec	; 0x23ec <app_options>
	/* static variables*/
	uint8 receivedByte=0,key=0;
    24e0:	1e 8e       	std	Y+30, r1	; 0x1e
    24e2:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1){

		key = KEYPAD_getPressedKey();
    24e4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <KEYPAD_getPressedKey>
    24e8:	8d 8f       	std	Y+29, r24	; 0x1d
		if (key == '+') {
    24ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ec:	8b 32       	cpi	r24, 0x2B	; 43
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <main+0xd8>
    24f0:	9c c0       	rjmp	.+312    	; 0x262a <main+0x210>
		LCD_clearScreen();
    24f2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayString("Enter password");
    24f6:	85 e9       	ldi	r24, 0x95	; 149
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
		get_password (PassWord);
    24fe:	8a e2       	ldi	r24, 0x2A	; 42
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <get_password>
		UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
    2506:	85 e1       	ldi	r24, 0x15	; 21
    2508:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
		usart_send_password (PassWord);
    250c:	8a e2       	ldi	r24, 0x2A	; 42
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	0e 94 54 10 	call	0x20a8	; 0x20a8 <usart_send_password>
		/* inform Control ECU the option that user chose */
		UART_sendByte('+');
    2514:	8b e2       	ldi	r24, 0x2B	; 43
    2516:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>

		/* Control ECU responses [either the password is correct or wrong] */
		receivedByte = UART_recieveByte();
    251a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    251e:	8e 8f       	std	Y+30, r24	; 0x1e
		if (receivedByte == UNLOCKING_DOOR) {
    2520:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2522:	85 32       	cpi	r24, 0x25	; 37
    2524:	19 f4       	brne	.+6      	; 0x252c <main+0x112>
			door_unlock (); /* start displaying door status on LCD */
    2526:	0e 94 ed 10 	call	0x21da	; 0x21da <door_unlock>
    252a:	7c c0       	rjmp	.+248    	; 0x2624 <main+0x20a>

		} else if (receivedByte == WRONG_PASSWORD) {
    252c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    252e:	80 33       	cpi	r24, 0x30	; 48
    2530:	09 f0       	breq	.+2      	; 0x2534 <main+0x11a>
    2532:	78 c0       	rjmp	.+240    	; 0x2624 <main+0x20a>
		LCD_clearScreen();
    2534:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayString("Wrong password");
    2538:	89 ee       	ldi	r24, 0xE9	; 233
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e4       	ldi	r25, 0x40	; 64
    2544:	ac e9       	ldi	r26, 0x9C	; 156
    2546:	b5 e4       	ldi	r27, 0x45	; 69
    2548:	89 8f       	std	Y+25, r24	; 0x19
    254a:	9a 8f       	std	Y+26, r25	; 0x1a
    254c:	ab 8f       	std	Y+27, r26	; 0x1b
    254e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	69 8d       	ldd	r22, Y+25	; 0x19
    2552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	53 e4       	ldi	r21, 0x43	; 67
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8d 8b       	std	Y+21, r24	; 0x15
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	af 8b       	std	Y+23, r26	; 0x17
    256e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <main+0x178>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 8b       	std	Y+20, r25	; 0x14
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <main+0x1f6>
	else if (__tmp > 65535)
    2592:	6d 89       	ldd	r22, Y+21	; 0x15
    2594:	7e 89       	ldd	r23, Y+22	; 0x16
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	98 8d       	ldd	r25, Y+24	; 0x18
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	69 8d       	ldd	r22, Y+25	; 0x19
    25ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <main+0x1d8>
    25d4:	89 e1       	ldi	r24, 0x19	; 25
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9a 8b       	std	Y+18, r25	; 0x12
    25da:	89 8b       	std	Y+17, r24	; 0x11
    25dc:	89 89       	ldd	r24, Y+17	; 0x11
    25de:	9a 89       	ldd	r25, Y+18	; 0x12
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <main+0x1c6>
    25e4:	9a 8b       	std	Y+18, r25	; 0x12
    25e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	8b 89       	ldd	r24, Y+19	; 0x13
    25f4:	9c 89       	ldd	r25, Y+20	; 0x14
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <main+0x1ba>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	6d 89       	ldd	r22, Y+21	; 0x15
    25fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2600:	8f 89       	ldd	r24, Y+23	; 0x17
    2602:	98 8d       	ldd	r25, Y+24	; 0x18
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9c 8b       	std	Y+20, r25	; 0x14
    260e:	8b 8b       	std	Y+19, r24	; 0x13
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	98 8b       	std	Y+16, r25	; 0x10
    2616:	8f 87       	std	Y+15, r24	; 0x0f
    2618:	8f 85       	ldd	r24, Y+15	; 0x0f
    261a:	98 89       	ldd	r25, Y+16	; 0x10
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <main+0x202>
    2620:	98 8b       	std	Y+16, r25	; 0x10
    2622:	8f 87       	std	Y+15, r24	; 0x0f
    	_delay_ms(lcd_display_delay );
					}
		app_options(); /* system back to idle & display main options */
    2624:	0e 94 f6 11 	call	0x23ec	; 0x23ec <app_options>
    2628:	5d cf       	rjmp	.-326    	; 0x24e4 <main+0xca>


		} else if (key == '-') {
    262a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262c:	8d 32       	cpi	r24, 0x2D	; 45
    262e:	09 f0       	breq	.+2      	; 0x2632 <main+0x218>
    2630:	59 cf       	rjmp	.-334    	; 0x24e4 <main+0xca>
		LCD_clearScreen();
    2632:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayString("Enter current password");
    2636:	88 ef       	ldi	r24, 0xF8	; 248
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
		get_password (PassWord);
    263e:	8a e2       	ldi	r24, 0x2A	; 42
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <get_password>
		UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
    2646:	85 e1       	ldi	r24, 0x15	; 21
    2648:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
		usart_send_password (PassWord);
    264c:	8a e2       	ldi	r24, 0x2A	; 42
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0e 94 54 10 	call	0x20a8	; 0x20a8 <usart_send_password>

					/* inform Control ECU the option that user chose */
		UART_sendByte(CHANGE_PASSWORD );
    2654:	88 e1       	ldi	r24, 0x18	; 24
    2656:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>

		receivedByte = UART_recieveByte();
    265a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    265e:	8e 8f       	std	Y+30, r24	; 0x1e
		if (receivedByte == CHANGING_PASSWORD) {
    2660:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2662:	81 33       	cpi	r24, 0x31	; 49
    2664:	29 f4       	brne	.+10     	; 0x2670 <main+0x256>
			password_init();
    2666:	0e 94 21 11 	call	0x2242	; 0x2242 <password_init>
		LCD_clearScreen();
    266a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
    266e:	7c c0       	rjmp	.+248    	; 0x2768 <main+0x34e>
		} else if (receivedByte == WRONG_PASSWORD) {
    2670:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2672:	80 33       	cpi	r24, 0x30	; 48
    2674:	09 f0       	breq	.+2      	; 0x2678 <main+0x25e>
    2676:	78 c0       	rjmp	.+240    	; 0x2768 <main+0x34e>
		LCD_clearScreen();
    2678:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_clearScreen>
		LCD_displayString("Wrong password");
    267c:	89 ee       	ldi	r24, 0xE9	; 233
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayString>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e4       	ldi	r25, 0x40	; 64
    2688:	ac e9       	ldi	r26, 0x9C	; 156
    268a:	b5 e4       	ldi	r27, 0x45	; 69
    268c:	8b 87       	std	Y+11, r24	; 0x0b
    268e:	9c 87       	std	Y+12, r25	; 0x0c
    2690:	ad 87       	std	Y+13, r26	; 0x0d
    2692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2694:	6b 85       	ldd	r22, Y+11	; 0x0b
    2696:	7c 85       	ldd	r23, Y+12	; 0x0c
    2698:	8d 85       	ldd	r24, Y+13	; 0x0d
    269a:	9e 85       	ldd	r25, Y+14	; 0x0e
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a e7       	ldi	r20, 0x7A	; 122
    26a2:	53 e4       	ldi	r21, 0x43	; 67
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8f 83       	std	Y+7, r24	; 0x07
    26ae:	98 87       	std	Y+8, r25	; 0x08
    26b0:	a9 87       	std	Y+9, r26	; 0x09
    26b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	2c f4       	brge	.+10     	; 0x26d6 <main+0x2bc>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <main+0x33a>
	else if (__tmp > 65535)
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	57 e4       	ldi	r21, 0x47	; 71
    26e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	4c f5       	brge	.+82     	; 0x2740 <main+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <main+0x31c>
    2718:	89 e1       	ldi	r24, 0x19	; 25
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9c 83       	std	Y+4, r25	; 0x04
    271e:	8b 83       	std	Y+3, r24	; 0x03
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <main+0x30a>
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	69 f7       	brne	.-38     	; 0x2718 <main+0x2fe>
    273e:	14 c0       	rjmp	.+40     	; 0x2768 <main+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <main+0x346>
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(lcd_display_delay );
					}
		app_options();
    2768:	0e 94 f6 11 	call	0x23ec	; 0x23ec <app_options>
    276c:	bb ce       	rjmp	.-650    	; 0x24e4 <main+0xca>

0000276e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_configType * configPtr)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <UART_init+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <UART_init+0x8>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 BAUD_PRESCALE = 0;
    277e:	1a 82       	std	Y+2, r1	; 0x02
    2780:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2782:	eb e2       	ldi	r30, 0x2B	; 43
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    278a:	ea e2       	ldi	r30, 0x2A	; 42
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	88 e1       	ldi	r24, 0x18	; 24
    2790:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= ((configPtr->parityConfig) << UPM0);
    2792:	a0 e4       	ldi	r26, 0x40	; 64
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e0 e4       	ldi	r30, 0x40	; 64
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	28 2f       	mov	r18, r24
    279e:	eb 81       	ldd	r30, Y+3	; 0x03
    27a0:	fc 81       	ldd	r31, Y+4	; 0x04
    27a2:	84 81       	ldd	r24, Z+4	; 0x04
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	82 95       	swap	r24
    27aa:	92 95       	swap	r25
    27ac:	90 7f       	andi	r25, 0xF0	; 240
    27ae:	98 27       	eor	r25, r24
    27b0:	80 7f       	andi	r24, 0xF0	; 240
    27b2:	98 27       	eor	r25, r24
    27b4:	82 2b       	or	r24, r18
    27b6:	8c 93       	st	X, r24
	UCSRC |= ((configPtr->stopBitConfig) << USBS);
    27b8:	a0 e4       	ldi	r26, 0x40	; 64
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e0 e4       	ldi	r30, 0x40	; 64
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	28 2f       	mov	r18, r24
    27c4:	eb 81       	ldd	r30, Y+3	; 0x03
    27c6:	fc 81       	ldd	r31, Y+4	; 0x04
    27c8:	85 81       	ldd	r24, Z+5	; 0x05
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	82 2b       	or	r24, r18
    27dc:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ0);
    27de:	a0 e4       	ldi	r26, 0x40	; 64
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e0 e4       	ldi	r30, 0x40	; 64
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8d 7f       	andi	r24, 0xFD	; 253
    27ea:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    27ec:	a0 e4       	ldi	r26, 0x40	; 64
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e0 e4       	ldi	r30, 0x40	; 64
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8b 7f       	andi	r24, 0xFB	; 251
    27f8:	8c 93       	st	X, r24

	if (configPtr->dataType != Data_9_Bits){
    27fa:	eb 81       	ldd	r30, Y+3	; 0x03
    27fc:	fc 81       	ldd	r31, Y+4	; 0x04
    27fe:	86 81       	ldd	r24, Z+6	; 0x06
    2800:	87 30       	cpi	r24, 0x07	; 7
    2802:	81 f0       	breq	.+32     	; 0x2824 <UART_init+0xb6>
			UCSRC |= ((configPtr->dataType) << UCSZ0);
    2804:	a0 e4       	ldi	r26, 0x40	; 64
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e0 e4       	ldi	r30, 0x40	; 64
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	28 2f       	mov	r18, r24
    2810:	eb 81       	ldd	r30, Y+3	; 0x03
    2812:	fc 81       	ldd	r31, Y+4	; 0x04
    2814:	86 81       	ldd	r24, Z+6	; 0x06
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	82 2b       	or	r24, r18
    2820:	8c 93       	st	X, r24
    2822:	15 c0       	rjmp	.+42     	; 0x284e <UART_init+0xe0>
		}else{
			SET_BIT(UCSRC,UCSZ0);
    2824:	a0 e4       	ldi	r26, 0x40	; 64
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e0 e4       	ldi	r30, 0x40	; 64
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	82 60       	ori	r24, 0x02	; 2
    2830:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    2832:	a0 e4       	ldi	r26, 0x40	; 64
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e0 e4       	ldi	r30, 0x40	; 64
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	84 60       	ori	r24, 0x04	; 4
    283e:	8c 93       	st	X, r24
			SET_BIT(UCSRB,UCSZ2);
    2840:	aa e2       	ldi	r26, 0x2A	; 42
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ea e2       	ldi	r30, 0x2A	; 42
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	84 60       	ori	r24, 0x04	; 4
    284c:	8c 93       	st	X, r24
		}
	/* Calculate the UBRR register value */
	
	BAUD_PRESCALE = (uint16)(((F_CPU / ((configPtr->baud_rate) * 8UL))) - 1);
    284e:	eb 81       	ldd	r30, Y+3	; 0x03
    2850:	fc 81       	ldd	r31, Y+4	; 0x04
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	a2 81       	ldd	r26, Z+2	; 0x02
    2858:	b3 81       	ldd	r27, Z+3	; 0x03
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	aa 1f       	adc	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	aa 1f       	adc	r26, r26
    2870:	bb 1f       	adc	r27, r27
    2872:	9c 01       	movw	r18, r24
    2874:	ad 01       	movw	r20, r26
    2876:	80 e4       	ldi	r24, 0x40	; 64
    2878:	92 e4       	ldi	r25, 0x42	; 66
    287a:	af e0       	ldi	r26, 0x0F	; 15
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2890:	e0 e4       	ldi	r30, 0x40	; 64
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	89 2f       	mov	r24, r25
    289a:	99 27       	eor	r25, r25
    289c:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    289e:	e9 e2       	ldi	r30, 0x29	; 41
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	80 83       	st	Z, r24
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	0f 92       	push	r0
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28c0:	eb e2       	ldi	r30, 0x2B	; 43
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	88 2f       	mov	r24, r24
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	80 72       	andi	r24, 0x20	; 32
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	b9 f3       	breq	.-18     	; 0x28c0 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    28d2:	ec e2       	ldi	r30, 0x2C	; 44
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    28da:	0f 90       	pop	r0
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    28ea:	eb e2       	ldi	r30, 0x2B	; 43
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	88 23       	and	r24, r24
    28f2:	dc f7       	brge	.-10     	; 0x28ea <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    28f4:	ec e2       	ldi	r30, 0x2C	; 44
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
}
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <UART_sendString+0x6>
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	9b 83       	std	Y+3, r25	; 0x03
    290e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2910:	19 82       	std	Y+1, r1	; 0x01
    2912:	0e c0       	rjmp	.+28     	; 0x2930 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	fc 01       	movw	r30, r24
    2920:	e2 0f       	add	r30, r18
    2922:	f3 1f       	adc	r31, r19
    2924:	80 81       	ld	r24, Z
    2926:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <UART_sendByte>
		i++;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	fc 01       	movw	r30, r24
    293c:	e2 0f       	add	r30, r18
    293e:	f3 1f       	adc	r31, r19
    2940:	80 81       	ld	r24, Z
    2942:	88 23       	and	r24, r24
    2944:	39 f7       	brne	.-50     	; 0x2914 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <UART_receiveString+0xa>
    295c:	0f 92       	push	r0
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	9b 83       	std	Y+3, r25	; 0x03
    2964:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2966:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	8c 01       	movw	r16, r24
    2974:	02 0f       	add	r16, r18
    2976:	13 1f       	adc	r17, r19
    2978:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    297c:	f8 01       	movw	r30, r16
    297e:	80 83       	st	Z, r24
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	9b 81       	ldd	r25, Y+3	; 0x03
    2992:	8c 01       	movw	r16, r24
    2994:	02 0f       	add	r16, r18
    2996:	13 1f       	adc	r17, r19
    2998:	0e 94 71 14 	call	0x28e2	; 0x28e2 <UART_recieveByte>
    299c:	f8 01       	movw	r30, r16
    299e:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	fc 01       	movw	r30, r24
    29ac:	e2 0f       	add	r30, r18
    29ae:	f3 1f       	adc	r31, r19
    29b0:	80 81       	ld	r24, Z
    29b2:	83 32       	cpi	r24, 0x23	; 35
    29b4:	31 f7       	brne	.-52     	; 0x2982 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	9b 81       	ldd	r25, Y+3	; 0x03
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	10 82       	st	Z, r1
}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <__udivmodsi4>:
    29d8:	a1 e2       	ldi	r26, 0x21	; 33
    29da:	1a 2e       	mov	r1, r26
    29dc:	aa 1b       	sub	r26, r26
    29de:	bb 1b       	sub	r27, r27
    29e0:	fd 01       	movw	r30, r26
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <__udivmodsi4_ep>

000029e4 <__udivmodsi4_loop>:
    29e4:	aa 1f       	adc	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	ee 1f       	adc	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	a2 17       	cp	r26, r18
    29ee:	b3 07       	cpc	r27, r19
    29f0:	e4 07       	cpc	r30, r20
    29f2:	f5 07       	cpc	r31, r21
    29f4:	20 f0       	brcs	.+8      	; 0x29fe <__udivmodsi4_ep>
    29f6:	a2 1b       	sub	r26, r18
    29f8:	b3 0b       	sbc	r27, r19
    29fa:	e4 0b       	sbc	r30, r20
    29fc:	f5 0b       	sbc	r31, r21

000029fe <__udivmodsi4_ep>:
    29fe:	66 1f       	adc	r22, r22
    2a00:	77 1f       	adc	r23, r23
    2a02:	88 1f       	adc	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	1a 94       	dec	r1
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <__udivmodsi4_loop>
    2a0a:	60 95       	com	r22
    2a0c:	70 95       	com	r23
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	9b 01       	movw	r18, r22
    2a14:	ac 01       	movw	r20, r24
    2a16:	bd 01       	movw	r22, r26
    2a18:	cf 01       	movw	r24, r30
    2a1a:	08 95       	ret

00002a1c <__prologue_saves__>:
    2a1c:	2f 92       	push	r2
    2a1e:	3f 92       	push	r3
    2a20:	4f 92       	push	r4
    2a22:	5f 92       	push	r5
    2a24:	6f 92       	push	r6
    2a26:	7f 92       	push	r7
    2a28:	8f 92       	push	r8
    2a2a:	9f 92       	push	r9
    2a2c:	af 92       	push	r10
    2a2e:	bf 92       	push	r11
    2a30:	cf 92       	push	r12
    2a32:	df 92       	push	r13
    2a34:	ef 92       	push	r14
    2a36:	ff 92       	push	r15
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	ca 1b       	sub	r28, r26
    2a46:	db 0b       	sbc	r29, r27
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	09 94       	ijmp

00002a54 <__epilogue_restores__>:
    2a54:	2a 88       	ldd	r2, Y+18	; 0x12
    2a56:	39 88       	ldd	r3, Y+17	; 0x11
    2a58:	48 88       	ldd	r4, Y+16	; 0x10
    2a5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a66:	b9 84       	ldd	r11, Y+9	; 0x09
    2a68:	c8 84       	ldd	r12, Y+8	; 0x08
    2a6a:	df 80       	ldd	r13, Y+7	; 0x07
    2a6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a70:	0c 81       	ldd	r16, Y+4	; 0x04
    2a72:	1b 81       	ldd	r17, Y+3	; 0x03
    2a74:	aa 81       	ldd	r26, Y+2	; 0x02
    2a76:	b9 81       	ldd	r27, Y+1	; 0x01
    2a78:	ce 0f       	add	r28, r30
    2a7a:	d1 1d       	adc	r29, r1
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	ed 01       	movw	r28, r26
    2a88:	08 95       	ret

00002a8a <itoa>:
    2a8a:	fb 01       	movw	r30, r22
    2a8c:	9f 01       	movw	r18, r30
    2a8e:	e8 94       	clt
    2a90:	42 30       	cpi	r20, 0x02	; 2
    2a92:	c4 f0       	brlt	.+48     	; 0x2ac4 <itoa+0x3a>
    2a94:	45 32       	cpi	r20, 0x25	; 37
    2a96:	b4 f4       	brge	.+44     	; 0x2ac4 <itoa+0x3a>
    2a98:	4a 30       	cpi	r20, 0x0A	; 10
    2a9a:	29 f4       	brne	.+10     	; 0x2aa6 <itoa+0x1c>
    2a9c:	97 fb       	bst	r25, 7
    2a9e:	1e f4       	brtc	.+6      	; 0x2aa6 <itoa+0x1c>
    2aa0:	90 95       	com	r25
    2aa2:	81 95       	neg	r24
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	64 2f       	mov	r22, r20
    2aa8:	77 27       	eor	r23, r23
    2aaa:	0e 94 76 15 	call	0x2aec	; 0x2aec <__udivmodhi4>
    2aae:	80 5d       	subi	r24, 0xD0	; 208
    2ab0:	8a 33       	cpi	r24, 0x3A	; 58
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <itoa+0x2c>
    2ab4:	89 5d       	subi	r24, 0xD9	; 217
    2ab6:	81 93       	st	Z+, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	a1 f7       	brne	.-24     	; 0x2aa6 <itoa+0x1c>
    2abe:	16 f4       	brtc	.+4      	; 0x2ac4 <itoa+0x3a>
    2ac0:	5d e2       	ldi	r21, 0x2D	; 45
    2ac2:	51 93       	st	Z+, r21
    2ac4:	10 82       	st	Z, r1
    2ac6:	c9 01       	movw	r24, r18
    2ac8:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <strrev>

00002acc <strrev>:
    2acc:	dc 01       	movw	r26, r24
    2ace:	fc 01       	movw	r30, r24
    2ad0:	67 2f       	mov	r22, r23
    2ad2:	71 91       	ld	r23, Z+
    2ad4:	77 23       	and	r23, r23
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <strrev+0x4>
    2ad8:	32 97       	sbiw	r30, 0x02	; 2
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <strrev+0x18>
    2adc:	7c 91       	ld	r23, X
    2ade:	6d 93       	st	X+, r22
    2ae0:	70 83       	st	Z, r23
    2ae2:	62 91       	ld	r22, -Z
    2ae4:	ae 17       	cp	r26, r30
    2ae6:	bf 07       	cpc	r27, r31
    2ae8:	c8 f3       	brcs	.-14     	; 0x2adc <strrev+0x10>
    2aea:	08 95       	ret

00002aec <__udivmodhi4>:
    2aec:	aa 1b       	sub	r26, r26
    2aee:	bb 1b       	sub	r27, r27
    2af0:	51 e1       	ldi	r21, 0x11	; 17
    2af2:	07 c0       	rjmp	.+14     	; 0x2b02 <__udivmodhi4_ep>

00002af4 <__udivmodhi4_loop>:
    2af4:	aa 1f       	adc	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	a6 17       	cp	r26, r22
    2afa:	b7 07       	cpc	r27, r23
    2afc:	10 f0       	brcs	.+4      	; 0x2b02 <__udivmodhi4_ep>
    2afe:	a6 1b       	sub	r26, r22
    2b00:	b7 0b       	sbc	r27, r23

00002b02 <__udivmodhi4_ep>:
    2b02:	88 1f       	adc	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	5a 95       	dec	r21
    2b08:	a9 f7       	brne	.-22     	; 0x2af4 <__udivmodhi4_loop>
    2b0a:	80 95       	com	r24
    2b0c:	90 95       	com	r25
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	08 95       	ret

00002b14 <_exit>:
    2b14:	f8 94       	cli

00002b16 <__stop_program>:
    2b16:	ff cf       	rjmp	.-2      	; 0x2b16 <__stop_program>
